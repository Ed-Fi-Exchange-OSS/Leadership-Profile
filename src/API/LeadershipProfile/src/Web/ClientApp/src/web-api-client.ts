//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import followIfLoginRedirect from './components/api-authorization/followIfLoginRedirect';

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    postRegister(registration: RegisterRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registration);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostRegister(_response);
        });
    }

    protected processPostRegister(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postLogin(useCookies: boolean | null | undefined, useSessionCookies: boolean | null | undefined, login: LoginRequest | undefined): Promise<AccessTokenResponse> {
        let url_ = this.baseUrl + "/login?";
        if (useCookies !== undefined && useCookies !== null)
            url_ += "useCookies=" + encodeURIComponent("" + useCookies) + "&";
        if (useSessionCookies !== undefined && useSessionCookies !== null)
            url_ += "useSessionCookies=" + encodeURIComponent("" + useSessionCookies) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(login);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostLogin(_response);
        });
    }

    protected processPostLogin(response: Response): Promise<AccessTokenResponse> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccessTokenResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AccessTokenResponse>(null as any);
    }

    postRefresh(refreshRequest: RefreshRequest | undefined): Promise<AccessTokenResponse> {
        let url_ = this.baseUrl + "/refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(refreshRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostRefresh(_response);
        });
    }

    protected processPostRefresh(response: Response): Promise<AccessTokenResponse> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccessTokenResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AccessTokenResponse>(null as any);
    }

    getConfirmEmail(userId: string | null | undefined, code: string | null | undefined, changedEmail: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/confirmEmail?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (changedEmail !== undefined && changedEmail !== null)
            url_ += "changedEmail=" + encodeURIComponent("" + changedEmail) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetConfirmEmail(_response);
        });
    }

    protected processGetConfirmEmail(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postResendConfirmationEmail(resendRequest: ResendConfirmationEmailRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/resendConfirmationEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(resendRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostResendConfirmationEmail(_response);
        });
    }

    protected processPostResendConfirmationEmail(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postForgotPassword(resetRequest: ForgotPasswordRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/forgotPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(resetRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostForgotPassword(_response);
        });
    }

    protected processPostForgotPassword(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postResetPassword(resetRequest: ResetPasswordRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/resetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(resetRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostResetPassword(_response);
        });
    }

    protected processPostResetPassword(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postManage2fa(tfaRequest: TwoFactorRequest | undefined): Promise<TwoFactorResponse> {
        let url_ = this.baseUrl + "/manage/2fa";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tfaRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostManage2fa(_response);
        });
    }

    protected processPostManage2fa(response: Response): Promise<TwoFactorResponse> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TwoFactorResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TwoFactorResponse>(null as any);
    }

    getManageInfo(): Promise<InfoResponse> {
        let url_ = this.baseUrl + "/manage/info";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetManageInfo(_response);
        });
    }

    protected processGetManageInfo(response: Response): Promise<InfoResponse> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InfoResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InfoResponse>(null as any);
    }

    postManageInfo(infoRequest: InfoRequest | undefined): Promise<InfoResponse> {
        let url_ = this.baseUrl + "/manage/info";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(infoRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostManageInfo(_response);
        });
    }

    protected processPostManageInfo(response: Response): Promise<InfoResponse> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InfoResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InfoResponse>(null as any);
    }

    postLogout(): Promise<void> {
        let url_ = this.baseUrl + "/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostLogout(_response);
        });
    }

    protected processPostLogout(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class IdentifyLeadersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getLeadersWithPagination(query: GetLeadersWithPaginationQuery): Promise<ResponseDto> {
        let url_ = this.baseUrl + "/api/IdentifyLeaders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLeadersWithPagination(_response);
        });
    }

    protected processGetLeadersWithPagination(response: Response): Promise<ResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDto>(null as any);
    }
}

export class ProfilesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getApiProfiles(id: string): Promise<Response> {
        let url_ = this.baseUrl + "/api/Profiles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiProfiles(_response);
        });
    }

    protected processGetApiProfiles(response: Response): Promise<Response> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Response>(null as any);
    }
}

export class SearchClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getSearchResults(page: number, sortField: string | null, sortBy: string | null, onlyActive: boolean): Promise<PaginatedListOfSearchResultDto> {
        let url_ = this.baseUrl + "/api/Search?";
        if (page === undefined || page === null)
            throw new Error("The parameter 'page' must be defined and cannot be null.");
        else
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (sortField === undefined)
            throw new Error("The parameter 'sortField' must be defined.");
        else if(sortField !== null)
            url_ += "SortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortBy === undefined)
            throw new Error("The parameter 'sortBy' must be defined.");
        else if(sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (onlyActive === undefined || onlyActive === null)
            throw new Error("The parameter 'onlyActive' must be defined and cannot be null.");
        else
            url_ += "OnlyActive=" + encodeURIComponent("" + onlyActive) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSearchResults(_response);
        });
    }

    protected processGetSearchResults(response: Response): Promise<PaginatedListOfSearchResultDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfSearchResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfSearchResultDto>(null as any);
    }

    getFilteredSearchResults(query: GetFilteredWithPaginationQuery): Promise<ResponseOfSearchResultDto> {
        let url_ = this.baseUrl + "/api/Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFilteredSearchResults(_response);
        });
    }

    protected processGetFilteredSearchResults(response: Response): Promise<ResponseOfSearchResultDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseOfSearchResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseOfSearchResultDto>(null as any);
    }
}

export class VacancyForecastsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getVacancyForecasts(query: GetVacancyForecastsQuery): Promise<VacancyForecast[]> {
        let url_ = this.baseUrl + "/api/VacancyForecasts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetVacancyForecasts(_response);
        });
    }

    protected processGetVacancyForecasts(response: Response): Promise<VacancyForecast[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VacancyForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VacancyForecast[]>(null as any);
    }

    getActiveStaff(query: GetActiveStaffQuery): Promise<ActiveStaff[]> {
        let url_ = this.baseUrl + "/api/VacancyForecasts/ActiveStaff";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetActiveStaff(_response);
        });
    }

    protected processGetActiveStaff(response: Response): Promise<ActiveStaff[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ActiveStaff.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ActiveStaff[]>(null as any);
    }
}

export class WebControlsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getApiWebControlsAssignments(): Promise<ListItemAssignment[]> {
        let url_ = this.baseUrl + "/api/WebControls/Assignments";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiWebControlsAssignments(_response);
        });
    }

    protected processGetApiWebControlsAssignments(response: Response): Promise<ListItemAssignment[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ListItemAssignment.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ListItemAssignment[]>(null as any);
    }

    getApiWebControlsCategories(): Promise<ListItemCategory[]> {
        let url_ = this.baseUrl + "/api/WebControls/Categories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiWebControlsCategories(_response);
        });
    }

    protected processGetApiWebControlsCategories(response: Response): Promise<ListItemCategory[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ListItemCategory.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ListItemCategory[]>(null as any);
    }

    getApiWebControlsDegrees(): Promise<ListItemDegree[]> {
        let url_ = this.baseUrl + "/api/WebControls/Degrees";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiWebControlsDegrees(_response);
        });
    }

    protected processGetApiWebControlsDegrees(response: Response): Promise<ListItemDegree[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ListItemDegree.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ListItemDegree[]>(null as any);
    }

    getApiWebControlsSchoolCategories(): Promise<ListItemSchoolCategory[]> {
        let url_ = this.baseUrl + "/api/WebControls/SchoolCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiWebControlsSchoolCategories(_response);
        });
    }

    protected processGetApiWebControlsSchoolCategories(response: Response): Promise<ListItemSchoolCategory[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ListItemSchoolCategory.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ListItemSchoolCategory[]>(null as any);
    }

    getApiWebControlsInstitutions(): Promise<ListItemInstitution[]> {
        let url_ = this.baseUrl + "/api/WebControls/Institutions";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiWebControlsInstitutions(_response);
        });
    }

    protected processGetApiWebControlsInstitutions(response: Response): Promise<ListItemInstitution[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ListItemInstitution.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ListItemInstitution[]>(null as any);
    }

    getApiWebControlsMeasurementCategories(): Promise<Response2> {
        let url_ = this.baseUrl + "/api/WebControls/MeasurementCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiWebControlsMeasurementCategories(_response);
        });
    }

    protected processGetApiWebControlsMeasurementCategories(response: Response): Promise<Response2> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response2.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Response2>(null as any);
    }
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class HttpValidationProblemDetails extends ProblemDetails implements IHttpValidationProblemDetails {
    errors?: { [key: string]: string[]; };

    [key: string]: any;

    constructor(data?: IHttpValidationProblemDetails) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static override fromJS(data: any): HttpValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new HttpValidationProblemDetails();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        super.toJSON(data);
        return data;
    }
}

export interface IHttpValidationProblemDetails extends IProblemDetails {
    errors?: { [key: string]: string[]; };

    [key: string]: any;
}

export class RegisterRequest implements IRegisterRequest {
    email?: string;
    password?: string;

    constructor(data?: IRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterRequest {
    email?: string;
    password?: string;
}

export class AccessTokenResponse implements IAccessTokenResponse {
    tokenType?: string;
    accessToken?: string;
    expiresIn?: number;
    refreshToken?: string;

    constructor(data?: IAccessTokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tokenType = _data["tokenType"];
            this.accessToken = _data["accessToken"];
            this.expiresIn = _data["expiresIn"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): AccessTokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccessTokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tokenType"] = this.tokenType;
        data["accessToken"] = this.accessToken;
        data["expiresIn"] = this.expiresIn;
        data["refreshToken"] = this.refreshToken;
        return data;
    }
}

export interface IAccessTokenResponse {
    tokenType?: string;
    accessToken?: string;
    expiresIn?: number;
    refreshToken?: string;
}

export class LoginRequest implements ILoginRequest {
    email?: string;
    password?: string;
    twoFactorCode?: string | undefined;
    twoFactorRecoveryCode?: string | undefined;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.twoFactorCode = _data["twoFactorCode"];
            this.twoFactorRecoveryCode = _data["twoFactorRecoveryCode"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["twoFactorCode"] = this.twoFactorCode;
        data["twoFactorRecoveryCode"] = this.twoFactorRecoveryCode;
        return data;
    }
}

export interface ILoginRequest {
    email?: string;
    password?: string;
    twoFactorCode?: string | undefined;
    twoFactorRecoveryCode?: string | undefined;
}

export class RefreshRequest implements IRefreshRequest {
    refreshToken?: string;

    constructor(data?: IRefreshRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): RefreshRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refreshToken"] = this.refreshToken;
        return data;
    }
}

export interface IRefreshRequest {
    refreshToken?: string;
}

export class ResendConfirmationEmailRequest implements IResendConfirmationEmailRequest {
    email?: string;

    constructor(data?: IResendConfirmationEmailRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ResendConfirmationEmailRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ResendConfirmationEmailRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }
}

export interface IResendConfirmationEmailRequest {
    email?: string;
}

export class ForgotPasswordRequest implements IForgotPasswordRequest {
    email?: string;

    constructor(data?: IForgotPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ForgotPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }
}

export interface IForgotPasswordRequest {
    email?: string;
}

export class ResetPasswordRequest implements IResetPasswordRequest {
    email?: string;
    resetCode?: string;
    newPassword?: string;

    constructor(data?: IResetPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.resetCode = _data["resetCode"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ResetPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["resetCode"] = this.resetCode;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IResetPasswordRequest {
    email?: string;
    resetCode?: string;
    newPassword?: string;
}

export class TwoFactorResponse implements ITwoFactorResponse {
    sharedKey?: string;
    recoveryCodesLeft?: number;
    recoveryCodes?: string[] | undefined;
    isTwoFactorEnabled?: boolean;
    isMachineRemembered?: boolean;

    constructor(data?: ITwoFactorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sharedKey = _data["sharedKey"];
            this.recoveryCodesLeft = _data["recoveryCodesLeft"];
            if (Array.isArray(_data["recoveryCodes"])) {
                this.recoveryCodes = [] as any;
                for (let item of _data["recoveryCodes"])
                    this.recoveryCodes!.push(item);
            }
            this.isTwoFactorEnabled = _data["isTwoFactorEnabled"];
            this.isMachineRemembered = _data["isMachineRemembered"];
        }
    }

    static fromJS(data: any): TwoFactorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TwoFactorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sharedKey"] = this.sharedKey;
        data["recoveryCodesLeft"] = this.recoveryCodesLeft;
        if (Array.isArray(this.recoveryCodes)) {
            data["recoveryCodes"] = [];
            for (let item of this.recoveryCodes)
                data["recoveryCodes"].push(item);
        }
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isMachineRemembered"] = this.isMachineRemembered;
        return data;
    }
}

export interface ITwoFactorResponse {
    sharedKey?: string;
    recoveryCodesLeft?: number;
    recoveryCodes?: string[] | undefined;
    isTwoFactorEnabled?: boolean;
    isMachineRemembered?: boolean;
}

export class TwoFactorRequest implements ITwoFactorRequest {
    enable?: boolean | undefined;
    twoFactorCode?: string | undefined;
    resetSharedKey?: boolean;
    resetRecoveryCodes?: boolean;
    forgetMachine?: boolean;

    constructor(data?: ITwoFactorRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enable = _data["enable"];
            this.twoFactorCode = _data["twoFactorCode"];
            this.resetSharedKey = _data["resetSharedKey"];
            this.resetRecoveryCodes = _data["resetRecoveryCodes"];
            this.forgetMachine = _data["forgetMachine"];
        }
    }

    static fromJS(data: any): TwoFactorRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TwoFactorRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enable"] = this.enable;
        data["twoFactorCode"] = this.twoFactorCode;
        data["resetSharedKey"] = this.resetSharedKey;
        data["resetRecoveryCodes"] = this.resetRecoveryCodes;
        data["forgetMachine"] = this.forgetMachine;
        return data;
    }
}

export interface ITwoFactorRequest {
    enable?: boolean | undefined;
    twoFactorCode?: string | undefined;
    resetSharedKey?: boolean;
    resetRecoveryCodes?: boolean;
    forgetMachine?: boolean;
}

export class InfoResponse implements IInfoResponse {
    email?: string;
    isEmailConfirmed?: boolean;

    constructor(data?: IInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.isEmailConfirmed = _data["isEmailConfirmed"];
        }
    }

    static fromJS(data: any): InfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        return data;
    }
}

export interface IInfoResponse {
    email?: string;
    isEmailConfirmed?: boolean;
}

export class InfoRequest implements IInfoRequest {
    newEmail?: string | undefined;
    newPassword?: string | undefined;
    oldPassword?: string | undefined;

    constructor(data?: IInfoRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newEmail = _data["newEmail"];
            this.newPassword = _data["newPassword"];
            this.oldPassword = _data["oldPassword"];
        }
    }

    static fromJS(data: any): InfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new InfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newEmail"] = this.newEmail;
        data["newPassword"] = this.newPassword;
        data["oldPassword"] = this.oldPassword;
        return data;
    }
}

export interface IInfoRequest {
    newEmail?: string | undefined;
    newPassword?: string | undefined;
    oldPassword?: string | undefined;
}

export class ResponseDto implements IResponseDto {
    staff?: LeaderBriefDto[];
    staffCount?: number | undefined;
    chartsData?: ChartDataDto[];

    constructor(data?: IResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["staff"])) {
                this.staff = [] as any;
                for (let item of _data["staff"])
                    this.staff!.push(LeaderBriefDto.fromJS(item));
            }
            this.staffCount = _data["staffCount"];
            if (Array.isArray(_data["chartsData"])) {
                this.chartsData = [] as any;
                for (let item of _data["chartsData"])
                    this.chartsData!.push(ChartDataDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.staff)) {
            data["staff"] = [];
            for (let item of this.staff)
                data["staff"].push(item.toJSON());
        }
        data["staffCount"] = this.staffCount;
        if (Array.isArray(this.chartsData)) {
            data["chartsData"] = [];
            for (let item of this.chartsData)
                data["chartsData"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResponseDto {
    staff?: LeaderBriefDto[];
    staffCount?: number | undefined;
    chartsData?: ChartDataDto[];
}

export class LeaderBriefDto implements ILeaderBriefDto {
    staffUniqueId?: string | undefined;
    fullName?: string | undefined;
    nameOfInstitution?: string | undefined;
    schoolYear?: number;
    schoolLevel?: string | undefined;
    job?: string | undefined;
    positionTitle?: string | undefined;
    employeeID?: string | undefined;
    startDate?: Date;
    vacancyCause?: string | undefined;
    totalYearsOfExperience?: string | undefined;
    gender?: string | undefined;
    race?: string | undefined;
    overallScore?: number;
    domain1?: number;
    domain2?: number;
    domain3?: number;
    domain4?: number;
    domain5?: number;

    constructor(data?: ILeaderBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffUniqueId = _data["staffUniqueId"];
            this.fullName = _data["fullName"];
            this.nameOfInstitution = _data["nameOfInstitution"];
            this.schoolYear = _data["schoolYear"];
            this.schoolLevel = _data["schoolLevel"];
            this.job = _data["job"];
            this.positionTitle = _data["positionTitle"];
            this.employeeID = _data["employeeID"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.vacancyCause = _data["vacancyCause"];
            this.totalYearsOfExperience = _data["totalYearsOfExperience"];
            this.gender = _data["gender"];
            this.race = _data["race"];
            this.overallScore = _data["overallScore"];
            this.domain1 = _data["domain1"];
            this.domain2 = _data["domain2"];
            this.domain3 = _data["domain3"];
            this.domain4 = _data["domain4"];
            this.domain5 = _data["domain5"];
        }
    }

    static fromJS(data: any): LeaderBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeaderBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffUniqueId"] = this.staffUniqueId;
        data["fullName"] = this.fullName;
        data["nameOfInstitution"] = this.nameOfInstitution;
        data["schoolYear"] = this.schoolYear;
        data["schoolLevel"] = this.schoolLevel;
        data["job"] = this.job;
        data["positionTitle"] = this.positionTitle;
        data["employeeID"] = this.employeeID;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["vacancyCause"] = this.vacancyCause;
        data["totalYearsOfExperience"] = this.totalYearsOfExperience;
        data["gender"] = this.gender;
        data["race"] = this.race;
        data["overallScore"] = this.overallScore;
        data["domain1"] = this.domain1;
        data["domain2"] = this.domain2;
        data["domain3"] = this.domain3;
        data["domain4"] = this.domain4;
        data["domain5"] = this.domain5;
        return data;
    }
}

export interface ILeaderBriefDto {
    staffUniqueId?: string | undefined;
    fullName?: string | undefined;
    nameOfInstitution?: string | undefined;
    schoolYear?: number;
    schoolLevel?: string | undefined;
    job?: string | undefined;
    positionTitle?: string | undefined;
    employeeID?: string | undefined;
    startDate?: Date;
    vacancyCause?: string | undefined;
    totalYearsOfExperience?: string | undefined;
    gender?: string | undefined;
    race?: string | undefined;
    overallScore?: number;
    domain1?: number;
    domain2?: number;
    domain3?: number;
    domain4?: number;
    domain5?: number;
}

export class ChartDataDto implements IChartDataDto {
    labels?: string[];
    datasets?: ChartDataset[];

    constructor(data?: IChartDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["labels"])) {
                this.labels = [] as any;
                for (let item of _data["labels"])
                    this.labels!.push(item);
            }
            if (Array.isArray(_data["datasets"])) {
                this.datasets = [] as any;
                for (let item of _data["datasets"])
                    this.datasets!.push(ChartDataset.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChartDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.labels)) {
            data["labels"] = [];
            for (let item of this.labels)
                data["labels"].push(item);
        }
        if (Array.isArray(this.datasets)) {
            data["datasets"] = [];
            for (let item of this.datasets)
                data["datasets"].push(item.toJSON());
        }
        return data;
    }
}

export interface IChartDataDto {
    labels?: string[];
    datasets?: ChartDataset[];
}

export class ChartDataset implements IChartDataset {
    label?: string | undefined;
    backgroundColor?: string | undefined;
    data?: number[];

    constructor(data?: IChartDataset) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.backgroundColor = _data["backgroundColor"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
        }
    }

    static fromJS(data: any): ChartDataset {
        data = typeof data === 'object' ? data : {};
        let result = new ChartDataset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["backgroundColor"] = this.backgroundColor;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

export interface IChartDataset {
    label?: string | undefined;
    backgroundColor?: string | undefined;
    data?: number[];
}

export class GetLeadersWithPaginationQuery implements IGetLeadersWithPaginationQuery {
    listId?: number;
    pageNumber?: number;
    pageSize?: number;
    roles?: number[];
    schoolLevels?: number[];
    highestDegrees?: number[];
    hasCertification?: number[];
    yearsOfExperience?: number[];
    overallScore?: number[];
    domainOneScore?: number[];
    domainTwoScore?: number[];
    domainThreeScore?: number[];
    domainFourScore?: number[];
    domainFiveScore?: number[];

    constructor(data?: IGetLeadersWithPaginationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listId = _data["listId"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            if (Array.isArray(_data["schoolLevels"])) {
                this.schoolLevels = [] as any;
                for (let item of _data["schoolLevels"])
                    this.schoolLevels!.push(item);
            }
            if (Array.isArray(_data["highestDegrees"])) {
                this.highestDegrees = [] as any;
                for (let item of _data["highestDegrees"])
                    this.highestDegrees!.push(item);
            }
            if (Array.isArray(_data["hasCertification"])) {
                this.hasCertification = [] as any;
                for (let item of _data["hasCertification"])
                    this.hasCertification!.push(item);
            }
            if (Array.isArray(_data["yearsOfExperience"])) {
                this.yearsOfExperience = [] as any;
                for (let item of _data["yearsOfExperience"])
                    this.yearsOfExperience!.push(item);
            }
            if (Array.isArray(_data["overallScore"])) {
                this.overallScore = [] as any;
                for (let item of _data["overallScore"])
                    this.overallScore!.push(item);
            }
            if (Array.isArray(_data["domainOneScore"])) {
                this.domainOneScore = [] as any;
                for (let item of _data["domainOneScore"])
                    this.domainOneScore!.push(item);
            }
            if (Array.isArray(_data["domainTwoScore"])) {
                this.domainTwoScore = [] as any;
                for (let item of _data["domainTwoScore"])
                    this.domainTwoScore!.push(item);
            }
            if (Array.isArray(_data["domainThreeScore"])) {
                this.domainThreeScore = [] as any;
                for (let item of _data["domainThreeScore"])
                    this.domainThreeScore!.push(item);
            }
            if (Array.isArray(_data["domainFourScore"])) {
                this.domainFourScore = [] as any;
                for (let item of _data["domainFourScore"])
                    this.domainFourScore!.push(item);
            }
            if (Array.isArray(_data["domainFiveScore"])) {
                this.domainFiveScore = [] as any;
                for (let item of _data["domainFiveScore"])
                    this.domainFiveScore!.push(item);
            }
        }
    }

    static fromJS(data: any): GetLeadersWithPaginationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetLeadersWithPaginationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listId"] = this.listId;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        if (Array.isArray(this.schoolLevels)) {
            data["schoolLevels"] = [];
            for (let item of this.schoolLevels)
                data["schoolLevels"].push(item);
        }
        if (Array.isArray(this.highestDegrees)) {
            data["highestDegrees"] = [];
            for (let item of this.highestDegrees)
                data["highestDegrees"].push(item);
        }
        if (Array.isArray(this.hasCertification)) {
            data["hasCertification"] = [];
            for (let item of this.hasCertification)
                data["hasCertification"].push(item);
        }
        if (Array.isArray(this.yearsOfExperience)) {
            data["yearsOfExperience"] = [];
            for (let item of this.yearsOfExperience)
                data["yearsOfExperience"].push(item);
        }
        if (Array.isArray(this.overallScore)) {
            data["overallScore"] = [];
            for (let item of this.overallScore)
                data["overallScore"].push(item);
        }
        if (Array.isArray(this.domainOneScore)) {
            data["domainOneScore"] = [];
            for (let item of this.domainOneScore)
                data["domainOneScore"].push(item);
        }
        if (Array.isArray(this.domainTwoScore)) {
            data["domainTwoScore"] = [];
            for (let item of this.domainTwoScore)
                data["domainTwoScore"].push(item);
        }
        if (Array.isArray(this.domainThreeScore)) {
            data["domainThreeScore"] = [];
            for (let item of this.domainThreeScore)
                data["domainThreeScore"].push(item);
        }
        if (Array.isArray(this.domainFourScore)) {
            data["domainFourScore"] = [];
            for (let item of this.domainFourScore)
                data["domainFourScore"].push(item);
        }
        if (Array.isArray(this.domainFiveScore)) {
            data["domainFiveScore"] = [];
            for (let item of this.domainFiveScore)
                data["domainFiveScore"].push(item);
        }
        return data;
    }
}

export interface IGetLeadersWithPaginationQuery {
    listId?: number;
    pageNumber?: number;
    pageSize?: number;
    roles?: number[];
    schoolLevels?: number[];
    highestDegrees?: number[];
    hasCertification?: number[];
    yearsOfExperience?: number[];
    overallScore?: number[];
    domainOneScore?: number[];
    domainTwoScore?: number[];
    domainThreeScore?: number[];
    domainFourScore?: number[];
    domainFiveScore?: number[];
}

export class Response implements IResponse {
    staffUniqueId?: string;
    firstName?: string;
    middleName?: string;
    lastSurname?: string;
    fullName?: string;
    currentPosition?: string;
    district?: string;
    school?: string;
    yearsOfService?: number;
    phone?: string;
    email?: string;
    interestedInNextRole?: boolean;
    positionHistory?: PositionHistory[];
    certificates?: Certificate[];
    professionalDevelopment?: ProfessionalDevelopment[];
    evaluations?: PerformanceEvaluation[];
    ratings?: PerformanceEvaluation[];

    constructor(data?: IResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffUniqueId = _data["staffUniqueId"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastSurname = _data["lastSurname"];
            this.fullName = _data["fullName"];
            this.currentPosition = _data["currentPosition"];
            this.district = _data["district"];
            this.school = _data["school"];
            this.yearsOfService = _data["yearsOfService"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.interestedInNextRole = _data["interestedInNextRole"];
            if (Array.isArray(_data["positionHistory"])) {
                this.positionHistory = [] as any;
                for (let item of _data["positionHistory"])
                    this.positionHistory!.push(PositionHistory.fromJS(item));
            }
            if (Array.isArray(_data["certificates"])) {
                this.certificates = [] as any;
                for (let item of _data["certificates"])
                    this.certificates!.push(Certificate.fromJS(item));
            }
            if (Array.isArray(_data["professionalDevelopment"])) {
                this.professionalDevelopment = [] as any;
                for (let item of _data["professionalDevelopment"])
                    this.professionalDevelopment!.push(ProfessionalDevelopment.fromJS(item));
            }
            if (Array.isArray(_data["evaluations"])) {
                this.evaluations = [] as any;
                for (let item of _data["evaluations"])
                    this.evaluations!.push(PerformanceEvaluation.fromJS(item));
            }
            if (Array.isArray(_data["ratings"])) {
                this.ratings = [] as any;
                for (let item of _data["ratings"])
                    this.ratings!.push(PerformanceEvaluation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Response {
        data = typeof data === 'object' ? data : {};
        let result = new Response();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffUniqueId"] = this.staffUniqueId;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastSurname"] = this.lastSurname;
        data["fullName"] = this.fullName;
        data["currentPosition"] = this.currentPosition;
        data["district"] = this.district;
        data["school"] = this.school;
        data["yearsOfService"] = this.yearsOfService;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["interestedInNextRole"] = this.interestedInNextRole;
        if (Array.isArray(this.positionHistory)) {
            data["positionHistory"] = [];
            for (let item of this.positionHistory)
                data["positionHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.certificates)) {
            data["certificates"] = [];
            for (let item of this.certificates)
                data["certificates"].push(item.toJSON());
        }
        if (Array.isArray(this.professionalDevelopment)) {
            data["professionalDevelopment"] = [];
            for (let item of this.professionalDevelopment)
                data["professionalDevelopment"].push(item.toJSON());
        }
        if (Array.isArray(this.evaluations)) {
            data["evaluations"] = [];
            for (let item of this.evaluations)
                data["evaluations"].push(item.toJSON());
        }
        if (Array.isArray(this.ratings)) {
            data["ratings"] = [];
            for (let item of this.ratings)
                data["ratings"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResponse {
    staffUniqueId?: string;
    firstName?: string;
    middleName?: string;
    lastSurname?: string;
    fullName?: string;
    currentPosition?: string;
    district?: string;
    school?: string;
    yearsOfService?: number;
    phone?: string;
    email?: string;
    interestedInNextRole?: boolean;
    positionHistory?: PositionHistory[];
    certificates?: Certificate[];
    professionalDevelopment?: ProfessionalDevelopment[];
    evaluations?: PerformanceEvaluation[];
    ratings?: PerformanceEvaluation[];
}

export class PositionHistory implements IPositionHistory {
    role?: string | undefined;
    schoolName?: string | undefined;
    startDate?: Date;
    endDate?: Date | undefined;

    constructor(data?: IPositionHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.role = _data["role"];
            this.schoolName = _data["schoolName"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PositionHistory {
        data = typeof data === 'object' ? data : {};
        let result = new PositionHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        data["schoolName"] = this.schoolName;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPositionHistory {
    role?: string | undefined;
    schoolName?: string | undefined;
    startDate?: Date;
    endDate?: Date | undefined;
}

export class Certificate implements ICertificate {
    description?: string;
    type?: string;
    validFromDate?: Date;
    validToDate?: Date | undefined;

    constructor(data?: ICertificate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.type = _data["type"];
            this.validFromDate = _data["validFromDate"] ? new Date(_data["validFromDate"].toString()) : <any>undefined;
            this.validToDate = _data["validToDate"] ? new Date(_data["validToDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Certificate {
        data = typeof data === 'object' ? data : {};
        let result = new Certificate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["type"] = this.type;
        data["validFromDate"] = this.validFromDate ? this.validFromDate.toISOString() : <any>undefined;
        data["validToDate"] = this.validToDate ? this.validToDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICertificate {
    description?: string;
    type?: string;
    validFromDate?: Date;
    validToDate?: Date | undefined;
}

export class ProfessionalDevelopment implements IProfessionalDevelopment {
    attendanceDate?: Date;
    professionalDevelopmentTitle?: string;
    location?: string;
    alignmentToLeadership?: string;

    constructor(data?: IProfessionalDevelopment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attendanceDate = _data["attendanceDate"] ? new Date(_data["attendanceDate"].toString()) : <any>undefined;
            this.professionalDevelopmentTitle = _data["professionalDevelopmentTitle"];
            this.location = _data["location"];
            this.alignmentToLeadership = _data["alignmentToLeadership"];
        }
    }

    static fromJS(data: any): ProfessionalDevelopment {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessionalDevelopment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attendanceDate"] = this.attendanceDate ? this.attendanceDate.toISOString() : <any>undefined;
        data["professionalDevelopmentTitle"] = this.professionalDevelopmentTitle;
        data["location"] = this.location;
        data["alignmentToLeadership"] = this.alignmentToLeadership;
        return data;
    }
}

export interface IProfessionalDevelopment {
    attendanceDate?: Date;
    professionalDevelopmentTitle?: string;
    location?: string;
    alignmentToLeadership?: string;
}

export class PerformanceEvaluation implements IPerformanceEvaluation {
    title?: string;
    ratingsByYear?: { [key: string]: PerformanceRating[]; };

    constructor(data?: IPerformanceEvaluation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            if (_data["ratingsByYear"]) {
                this.ratingsByYear = {} as any;
                for (let key in _data["ratingsByYear"]) {
                    if (_data["ratingsByYear"].hasOwnProperty(key))
                        (<any>this.ratingsByYear)![key] = _data["ratingsByYear"][key] ? _data["ratingsByYear"][key].map((i: any) => PerformanceRating.fromJS(i)) : [];
                }
            }
        }
    }

    static fromJS(data: any): PerformanceEvaluation {
        data = typeof data === 'object' ? data : {};
        let result = new PerformanceEvaluation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        if (this.ratingsByYear) {
            data["ratingsByYear"] = {};
            for (let key in this.ratingsByYear) {
                if (this.ratingsByYear.hasOwnProperty(key))
                    (<any>data["ratingsByYear"])[key] = (<any>this.ratingsByYear)[key];
            }
        }
        return data;
    }
}

export interface IPerformanceEvaluation {
    title?: string;
    ratingsByYear?: { [key: string]: PerformanceRating[]; };
}

export class PerformanceRating implements IPerformanceRating {
    category?: string;
    score?: number;

    constructor(data?: IPerformanceRating) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.category = _data["category"];
            this.score = _data["score"];
        }
    }

    static fromJS(data: any): PerformanceRating {
        data = typeof data === 'object' ? data : {};
        let result = new PerformanceRating();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category;
        data["score"] = this.score;
        return data;
    }
}

export interface IPerformanceRating {
    category?: string;
    score?: number;
}

export class PaginatedListOfSearchResultDto implements IPaginatedListOfSearchResultDto {
    items?: SearchResultDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfSearchResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SearchResultDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfSearchResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfSearchResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfSearchResultDto {
    items?: SearchResultDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class SearchResultDto implements ISearchResultDto {
    staffUniqueId?: string | undefined;
    firstName?: string | undefined;
    lastSurname?: string | undefined;
    fullName?: string | undefined;
    yearsOfService?: number;
    assignment?: string | undefined;
    degree?: string | undefined;
    institution?: string | undefined;
    interestedInNextRole?: boolean;

    constructor(data?: ISearchResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffUniqueId = _data["staffUniqueId"];
            this.firstName = _data["firstName"];
            this.lastSurname = _data["lastSurname"];
            this.fullName = _data["fullName"];
            this.yearsOfService = _data["yearsOfService"];
            this.assignment = _data["assignment"];
            this.degree = _data["degree"];
            this.institution = _data["institution"];
            this.interestedInNextRole = _data["interestedInNextRole"];
        }
    }

    static fromJS(data: any): SearchResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffUniqueId"] = this.staffUniqueId;
        data["firstName"] = this.firstName;
        data["lastSurname"] = this.lastSurname;
        data["fullName"] = this.fullName;
        data["yearsOfService"] = this.yearsOfService;
        data["assignment"] = this.assignment;
        data["degree"] = this.degree;
        data["institution"] = this.institution;
        data["interestedInNextRole"] = this.interestedInNextRole;
        return data;
    }
}

export interface ISearchResultDto {
    staffUniqueId?: string | undefined;
    firstName?: string | undefined;
    lastSurname?: string | undefined;
    fullName?: string | undefined;
    yearsOfService?: number;
    assignment?: string | undefined;
    degree?: string | undefined;
    institution?: string | undefined;
    interestedInNextRole?: boolean;
}

export class ResponseOfSearchResultDto implements IResponseOfSearchResultDto {
    totalCount?: number;
    pageCount?: number;
    results?: SearchResultDto[] | undefined;
    page?: number | undefined;

    constructor(data?: IResponseOfSearchResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            this.pageCount = _data["pageCount"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(SearchResultDto.fromJS(item));
            }
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): ResponseOfSearchResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseOfSearchResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        data["pageCount"] = this.pageCount;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["page"] = this.page;
        return data;
    }
}

export interface IResponseOfSearchResultDto {
    totalCount?: number;
    pageCount?: number;
    results?: SearchResultDto[] | undefined;
    page?: number | undefined;
}

export class GetFilteredWithPaginationQuery implements IGetFilteredWithPaginationQuery {
    page?: number;
    sortField?: string;
    sortBy?: string;
    onlyActive?: boolean;
    searchRequestBody?: ProfileSearchRequestBody;

    constructor(data?: IGetFilteredWithPaginationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.sortField = _data["sortField"];
            this.sortBy = _data["sortBy"];
            this.onlyActive = _data["onlyActive"];
            this.searchRequestBody = _data["searchRequestBody"] ? ProfileSearchRequestBody.fromJS(_data["searchRequestBody"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFilteredWithPaginationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetFilteredWithPaginationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["sortField"] = this.sortField;
        data["sortBy"] = this.sortBy;
        data["onlyActive"] = this.onlyActive;
        data["searchRequestBody"] = this.searchRequestBody ? this.searchRequestBody.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFilteredWithPaginationQuery {
    page?: number;
    sortField?: string;
    sortBy?: string;
    onlyActive?: boolean;
    searchRequestBody?: ProfileSearchRequestBody;
}

export class ProfileSearchRequestBody implements IProfileSearchRequestBody {
    yearsOfPriorExperienceRanges?: ProfileSearchYearsOfPriorExperience;
    ratings?: ProfileSearchRequestRatings[] | undefined;
    assignments?: ProfileSearchRequestAssignments;
    degrees?: ProfileSearchRequestDegrees;
    schoolCategories?: ProfileSearchRequestSchoolCategories;
    institutions?: ProfileSearchRequestInstitution;
    aspires?: ProfileSearchRequestAspires;
    name?: string | undefined;

    constructor(data?: IProfileSearchRequestBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.yearsOfPriorExperienceRanges = _data["yearsOfPriorExperienceRanges"] ? ProfileSearchYearsOfPriorExperience.fromJS(_data["yearsOfPriorExperienceRanges"]) : <any>undefined;
            if (Array.isArray(_data["ratings"])) {
                this.ratings = [] as any;
                for (let item of _data["ratings"])
                    this.ratings!.push(ProfileSearchRequestRatings.fromJS(item));
            }
            this.assignments = _data["assignments"] ? ProfileSearchRequestAssignments.fromJS(_data["assignments"]) : <any>undefined;
            this.degrees = _data["degrees"] ? ProfileSearchRequestDegrees.fromJS(_data["degrees"]) : <any>undefined;
            this.schoolCategories = _data["schoolCategories"] ? ProfileSearchRequestSchoolCategories.fromJS(_data["schoolCategories"]) : <any>undefined;
            this.institutions = _data["institutions"] ? ProfileSearchRequestInstitution.fromJS(_data["institutions"]) : <any>undefined;
            this.aspires = _data["aspires"] ? ProfileSearchRequestAspires.fromJS(_data["aspires"]) : <any>undefined;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ProfileSearchRequestBody {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileSearchRequestBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["yearsOfPriorExperienceRanges"] = this.yearsOfPriorExperienceRanges ? this.yearsOfPriorExperienceRanges.toJSON() : <any>undefined;
        if (Array.isArray(this.ratings)) {
            data["ratings"] = [];
            for (let item of this.ratings)
                data["ratings"].push(item.toJSON());
        }
        data["assignments"] = this.assignments ? this.assignments.toJSON() : <any>undefined;
        data["degrees"] = this.degrees ? this.degrees.toJSON() : <any>undefined;
        data["schoolCategories"] = this.schoolCategories ? this.schoolCategories.toJSON() : <any>undefined;
        data["institutions"] = this.institutions ? this.institutions.toJSON() : <any>undefined;
        data["aspires"] = this.aspires ? this.aspires.toJSON() : <any>undefined;
        data["name"] = this.name;
        return data;
    }
}

export interface IProfileSearchRequestBody {
    yearsOfPriorExperienceRanges?: ProfileSearchYearsOfPriorExperience;
    ratings?: ProfileSearchRequestRatings[] | undefined;
    assignments?: ProfileSearchRequestAssignments;
    degrees?: ProfileSearchRequestDegrees;
    schoolCategories?: ProfileSearchRequestSchoolCategories;
    institutions?: ProfileSearchRequestInstitution;
    aspires?: ProfileSearchRequestAspires;
    name?: string | undefined;
}

export class ProfileSearchYearsOfPriorExperience implements IProfileSearchYearsOfPriorExperience {
    values?: Range[] | undefined;

    constructor(data?: IProfileSearchYearsOfPriorExperience) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(Range.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProfileSearchYearsOfPriorExperience {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileSearchYearsOfPriorExperience();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProfileSearchYearsOfPriorExperience {
    values?: Range[] | undefined;
}

export class Range implements IRange {
    min?: number;
    max?: number;

    constructor(data?: IRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.min = _data["min"];
            this.max = _data["max"];
        }
    }

    static fromJS(data: any): Range {
        data = typeof data === 'object' ? data : {};
        let result = new Range();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["min"] = this.min;
        data["max"] = this.max;
        return data;
    }
}

export interface IRange {
    min?: number;
    max?: number;
}

export class ProfileSearchRequestRatings implements IProfileSearchRequestRatings {
    category?: string | undefined;
    score?: number;
    isPopulated?: boolean;

    constructor(data?: IProfileSearchRequestRatings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.category = _data["category"];
            this.score = _data["score"];
            this.isPopulated = _data["isPopulated"];
        }
    }

    static fromJS(data: any): ProfileSearchRequestRatings {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileSearchRequestRatings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category;
        data["score"] = this.score;
        data["isPopulated"] = this.isPopulated;
        return data;
    }
}

export interface IProfileSearchRequestRatings {
    category?: string | undefined;
    score?: number;
    isPopulated?: boolean;
}

export class ProfileSearchRequestAssignments implements IProfileSearchRequestAssignments {
    values?: number[] | undefined;

    constructor(data?: IProfileSearchRequestAssignments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(item);
            }
        }
    }

    static fromJS(data: any): ProfileSearchRequestAssignments {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileSearchRequestAssignments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item);
        }
        return data;
    }
}

export interface IProfileSearchRequestAssignments {
    values?: number[] | undefined;
}

export class ProfileSearchRequestDegrees implements IProfileSearchRequestDegrees {
    values?: number[] | undefined;

    constructor(data?: IProfileSearchRequestDegrees) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(item);
            }
        }
    }

    static fromJS(data: any): ProfileSearchRequestDegrees {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileSearchRequestDegrees();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item);
        }
        return data;
    }
}

export interface IProfileSearchRequestDegrees {
    values?: number[] | undefined;
}

export class ProfileSearchRequestSchoolCategories implements IProfileSearchRequestSchoolCategories {
    values?: number[] | undefined;

    constructor(data?: IProfileSearchRequestSchoolCategories) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(item);
            }
        }
    }

    static fromJS(data: any): ProfileSearchRequestSchoolCategories {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileSearchRequestSchoolCategories();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item);
        }
        return data;
    }
}

export interface IProfileSearchRequestSchoolCategories {
    values?: number[] | undefined;
}

export class ProfileSearchRequestInstitution implements IProfileSearchRequestInstitution {
    values?: number[] | undefined;

    constructor(data?: IProfileSearchRequestInstitution) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(item);
            }
        }
    }

    static fromJS(data: any): ProfileSearchRequestInstitution {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileSearchRequestInstitution();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item);
        }
        return data;
    }
}

export interface IProfileSearchRequestInstitution {
    values?: number[] | undefined;
}

export class ProfileSearchRequestAspires implements IProfileSearchRequestAspires {
    values?: number[] | undefined;

    constructor(data?: IProfileSearchRequestAspires) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(item);
            }
        }
    }

    static fromJS(data: any): ProfileSearchRequestAspires {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileSearchRequestAspires();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item);
        }
        return data;
    }
}

export interface IProfileSearchRequestAspires {
    values?: number[] | undefined;
}

export class VacancyForecast implements IVacancyForecast {
    staffUniqueId?: string;
    fullName?: string;
    age?: number | undefined;
    nameOfInstitution?: string;
    schoolLevel?: string;
    gender?: string;
    race?: string;
    vacancyCause?: string;
    schoolYear?: number;
    positionTitle?: string;
    overallScore?: number;

    constructor(data?: IVacancyForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffUniqueId = _data["staffUniqueId"];
            this.fullName = _data["fullName"];
            this.age = _data["age"];
            this.nameOfInstitution = _data["nameOfInstitution"];
            this.schoolLevel = _data["schoolLevel"];
            this.gender = _data["gender"];
            this.race = _data["race"];
            this.vacancyCause = _data["vacancyCause"];
            this.schoolYear = _data["schoolYear"];
            this.positionTitle = _data["positionTitle"];
            this.overallScore = _data["overallScore"];
        }
    }

    static fromJS(data: any): VacancyForecast {
        data = typeof data === 'object' ? data : {};
        let result = new VacancyForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffUniqueId"] = this.staffUniqueId;
        data["fullName"] = this.fullName;
        data["age"] = this.age;
        data["nameOfInstitution"] = this.nameOfInstitution;
        data["schoolLevel"] = this.schoolLevel;
        data["gender"] = this.gender;
        data["race"] = this.race;
        data["vacancyCause"] = this.vacancyCause;
        data["schoolYear"] = this.schoolYear;
        data["positionTitle"] = this.positionTitle;
        data["overallScore"] = this.overallScore;
        return data;
    }
}

export interface IVacancyForecast {
    staffUniqueId?: string;
    fullName?: string;
    age?: number | undefined;
    nameOfInstitution?: string;
    schoolLevel?: string;
    gender?: string;
    race?: string;
    vacancyCause?: string;
    schoolYear?: number;
    positionTitle?: string;
    overallScore?: number;
}

export class GetVacancyForecastsQuery implements IGetVacancyForecastsQuery {
    role?: string | undefined;

    constructor(data?: IGetVacancyForecastsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): GetVacancyForecastsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetVacancyForecastsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        return data;
    }
}

export interface IGetVacancyForecastsQuery {
    role?: string | undefined;
}

export class ActiveStaff implements IActiveStaff {
    staffUniqueId?: string | undefined;
    fullName?: string | undefined;
    age?: number | undefined;
    nameOfInstitution?: string | undefined;
    gender?: string | undefined;
    race?: string | undefined;
    vacancyCause?: string | undefined;
    schoolYear?: number | undefined;
    positionTitle?: string | undefined;
    overallScore?: number | undefined;
    rating?: number | undefined;
    schoolCategory?: string | undefined;
    yearsOfService?: number | undefined;
    retirementEligibility?: boolean | undefined;
    yearsToRetirement?: number | undefined;

    constructor(data?: IActiveStaff) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffUniqueId = _data["staffUniqueId"];
            this.fullName = _data["fullName"];
            this.age = _data["age"];
            this.nameOfInstitution = _data["nameOfInstitution"];
            this.gender = _data["gender"];
            this.race = _data["race"];
            this.vacancyCause = _data["vacancyCause"];
            this.schoolYear = _data["schoolYear"];
            this.positionTitle = _data["positionTitle"];
            this.overallScore = _data["overallScore"];
            this.rating = _data["rating"];
            this.schoolCategory = _data["schoolCategory"];
            this.yearsOfService = _data["yearsOfService"];
            this.retirementEligibility = _data["retirementEligibility"];
            this.yearsToRetirement = _data["yearsToRetirement"];
        }
    }

    static fromJS(data: any): ActiveStaff {
        data = typeof data === 'object' ? data : {};
        let result = new ActiveStaff();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffUniqueId"] = this.staffUniqueId;
        data["fullName"] = this.fullName;
        data["age"] = this.age;
        data["nameOfInstitution"] = this.nameOfInstitution;
        data["gender"] = this.gender;
        data["race"] = this.race;
        data["vacancyCause"] = this.vacancyCause;
        data["schoolYear"] = this.schoolYear;
        data["positionTitle"] = this.positionTitle;
        data["overallScore"] = this.overallScore;
        data["rating"] = this.rating;
        data["schoolCategory"] = this.schoolCategory;
        data["yearsOfService"] = this.yearsOfService;
        data["retirementEligibility"] = this.retirementEligibility;
        data["yearsToRetirement"] = this.yearsToRetirement;
        return data;
    }
}

export interface IActiveStaff {
    staffUniqueId?: string | undefined;
    fullName?: string | undefined;
    age?: number | undefined;
    nameOfInstitution?: string | undefined;
    gender?: string | undefined;
    race?: string | undefined;
    vacancyCause?: string | undefined;
    schoolYear?: number | undefined;
    positionTitle?: string | undefined;
    overallScore?: number | undefined;
    rating?: number | undefined;
    schoolCategory?: string | undefined;
    yearsOfService?: number | undefined;
    retirementEligibility?: boolean | undefined;
    yearsToRetirement?: number | undefined;
}

export class GetActiveStaffQuery implements IGetActiveStaffQuery {
    role?: string | undefined;

    constructor(data?: IGetActiveStaffQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): GetActiveStaffQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetActiveStaffQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        return data;
    }
}

export interface IGetActiveStaffQuery {
    role?: string | undefined;
}

export class ListItemBase implements IListItemBase {
    text?: string | undefined;
    value?: number;

    constructor(data?: IListItemBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ListItemBase {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["value"] = this.value;
        return data;
    }
}

export interface IListItemBase {
    text?: string | undefined;
    value?: number;
}

export class ListItemAssignment extends ListItemBase implements IListItemAssignment {

    constructor(data?: IListItemAssignment) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): ListItemAssignment {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemAssignment();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IListItemAssignment extends IListItemBase {
}

export class ListItemCategory implements IListItemCategory {
    category?: string | undefined;
    sortOrder?: number;
    evaluationTitle?: string | undefined;

    constructor(data?: IListItemCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.category = _data["category"];
            this.sortOrder = _data["sortOrder"];
            this.evaluationTitle = _data["evaluationTitle"];
        }
    }

    static fromJS(data: any): ListItemCategory {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category;
        data["sortOrder"] = this.sortOrder;
        data["evaluationTitle"] = this.evaluationTitle;
        return data;
    }
}

export interface IListItemCategory {
    category?: string | undefined;
    sortOrder?: number;
    evaluationTitle?: string | undefined;
}

export class ListItemDegree extends ListItemBase implements IListItemDegree {
    order?: number;

    constructor(data?: IListItemDegree) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.order = _data["order"];
        }
    }

    static override fromJS(data: any): ListItemDegree {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemDegree();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["order"] = this.order;
        super.toJSON(data);
        return data;
    }
}

export interface IListItemDegree extends IListItemBase {
    order?: number;
}

export class ListItemSchoolCategory extends ListItemBase implements IListItemSchoolCategory {

    constructor(data?: IListItemSchoolCategory) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): ListItemSchoolCategory {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemSchoolCategory();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IListItemSchoolCategory extends IListItemBase {
}

export class ListItemInstitution extends ListItemBase implements IListItemInstitution {

    constructor(data?: IListItemInstitution) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): ListItemInstitution {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemInstitution();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IListItemInstitution extends IListItemBase {
}

export class Response2 implements IResponse2 {
    categories?: Category[] | undefined;

    constructor(data?: IResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(Category.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Response2 {
        data = typeof data === 'object' ? data : {};
        let result = new Response2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResponse2 {
    categories?: Category[] | undefined;
}

export class Category implements ICategory {
    value?: string | undefined;
    text?: string | undefined;
    evaluationTitle?: string | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.text = _data["text"];
            this.evaluationTitle = _data["evaluationTitle"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        data["evaluationTitle"] = this.evaluationTitle;
        return data;
    }
}

export interface ICategory {
    value?: string | undefined;
    text?: string | undefined;
    evaluationTitle?: string | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}